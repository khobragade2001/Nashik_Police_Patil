/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2842.0, "minX": 0.0, "maxY": 123423.0, "series": [{"data": [[0.0, 2842.0], [0.1, 2916.0], [0.2, 3002.0], [0.3, 3002.0], [0.4, 3241.0], [0.5, 3249.0], [0.6, 3425.0], [0.7, 3532.0], [0.8, 3533.0], [0.9, 3541.0], [1.0, 3630.0], [1.1, 3852.0], [1.2, 3870.0], [1.3, 3889.0], [1.4, 3889.0], [1.5, 3914.0], [1.6, 3945.0], [1.7, 3951.0], [1.8, 3965.0], [1.9, 3969.0], [2.0, 4008.0], [2.1, 4014.0], [2.2, 4017.0], [2.3, 4021.0], [2.4, 4039.0], [2.5, 4063.0], [2.6, 4068.0], [2.7, 4077.0], [2.8, 4085.0], [2.9, 4101.0], [3.0, 4126.0], [3.1, 4131.0], [3.2, 4171.0], [3.3, 4172.0], [3.4, 4178.0], [3.5, 4190.0], [3.6, 4190.0], [3.7, 4192.0], [3.8, 4195.0], [3.9, 4196.0], [4.0, 4197.0], [4.1, 4198.0], [4.2, 4202.0], [4.3, 4204.0], [4.4, 4228.0], [4.5, 4238.0], [4.6, 4240.0], [4.7, 4250.0], [4.8, 4260.0], [4.9, 4263.0], [5.0, 4265.0], [5.1, 4270.0], [5.2, 4270.0], [5.3, 4271.0], [5.4, 4273.0], [5.5, 4274.0], [5.6, 4281.0], [5.7, 4284.0], [5.8, 4289.0], [5.9, 4292.0], [6.0, 4293.0], [6.1, 4295.0], [6.2, 4303.0], [6.3, 4313.0], [6.4, 4319.0], [6.5, 4332.0], [6.6, 4335.0], [6.7, 4336.0], [6.8, 4339.0], [6.9, 4341.0], [7.0, 4348.0], [7.1, 4352.0], [7.2, 4355.0], [7.3, 4357.0], [7.4, 4358.0], [7.5, 4359.0], [7.6, 4360.0], [7.7, 4369.0], [7.8, 4370.0], [7.9, 4374.0], [8.0, 4378.0], [8.1, 4378.0], [8.2, 4379.0], [8.3, 4383.0], [8.4, 4385.0], [8.5, 4387.0], [8.6, 4391.0], [8.7, 4393.0], [8.8, 4397.0], [8.9, 4405.0], [9.0, 4408.0], [9.1, 4409.0], [9.2, 4412.0], [9.3, 4415.0], [9.4, 4416.0], [9.5, 4417.0], [9.6, 4419.0], [9.7, 4424.0], [9.8, 4435.0], [9.9, 4437.0], [10.0, 4440.0], [10.1, 4441.0], [10.2, 4443.0], [10.3, 4447.0], [10.4, 4448.0], [10.5, 4451.0], [10.6, 4452.0], [10.7, 4458.0], [10.8, 4458.0], [10.9, 4461.0], [11.0, 4466.0], [11.1, 4467.0], [11.2, 4474.0], [11.3, 4475.0], [11.4, 4475.0], [11.5, 4479.0], [11.6, 4479.0], [11.7, 4484.0], [11.8, 4487.0], [11.9, 4488.0], [12.0, 4488.0], [12.1, 4488.0], [12.2, 4490.0], [12.3, 4496.0], [12.4, 4496.0], [12.5, 4497.0], [12.6, 4499.0], [12.7, 4502.0], [12.8, 4505.0], [12.9, 4505.0], [13.0, 4510.0], [13.1, 4513.0], [13.2, 4514.0], [13.3, 4515.0], [13.4, 4517.0], [13.5, 4517.0], [13.6, 4519.0], [13.7, 4522.0], [13.8, 4524.0], [13.9, 4524.0], [14.0, 4526.0], [14.1, 4528.0], [14.2, 4535.0], [14.3, 4535.0], [14.4, 4536.0], [14.5, 4536.0], [14.6, 4538.0], [14.7, 4541.0], [14.8, 4543.0], [14.9, 4544.0], [15.0, 4546.0], [15.1, 4548.0], [15.2, 4551.0], [15.3, 4552.0], [15.4, 4552.0], [15.5, 4553.0], [15.6, 4556.0], [15.7, 4564.0], [15.8, 4572.0], [15.9, 4573.0], [16.0, 4576.0], [16.1, 4577.0], [16.2, 4581.0], [16.3, 4581.0], [16.4, 4588.0], [16.5, 4589.0], [16.6, 4593.0], [16.7, 4594.0], [16.8, 4596.0], [16.9, 4599.0], [17.0, 4600.0], [17.1, 4602.0], [17.2, 4605.0], [17.3, 4608.0], [17.4, 4608.0], [17.5, 4609.0], [17.6, 4609.0], [17.7, 4611.0], [17.8, 4611.0], [17.9, 4612.0], [18.0, 4614.0], [18.1, 4614.0], [18.2, 4617.0], [18.3, 4620.0], [18.4, 4622.0], [18.5, 4624.0], [18.6, 4626.0], [18.7, 4630.0], [18.8, 4631.0], [18.9, 4634.0], [19.0, 4641.0], [19.1, 4642.0], [19.2, 4642.0], [19.3, 4644.0], [19.4, 4648.0], [19.5, 4655.0], [19.6, 4660.0], [19.7, 4660.0], [19.8, 4663.0], [19.9, 4664.0], [20.0, 4670.0], [20.1, 4671.0], [20.2, 4671.0], [20.3, 4673.0], [20.4, 4673.0], [20.5, 4674.0], [20.6, 4674.0], [20.7, 4676.0], [20.8, 4676.0], [20.9, 4677.0], [21.0, 4678.0], [21.1, 4680.0], [21.2, 4680.0], [21.3, 4684.0], [21.4, 4685.0], [21.5, 4688.0], [21.6, 4696.0], [21.7, 4700.0], [21.8, 4701.0], [21.9, 4701.0], [22.0, 4704.0], [22.1, 4706.0], [22.2, 4716.0], [22.3, 4718.0], [22.4, 4720.0], [22.5, 4723.0], [22.6, 4725.0], [22.7, 4725.0], [22.8, 4727.0], [22.9, 4729.0], [23.0, 4729.0], [23.1, 4733.0], [23.2, 4738.0], [23.3, 4738.0], [23.4, 4744.0], [23.5, 4745.0], [23.6, 4747.0], [23.7, 4752.0], [23.8, 4754.0], [23.9, 4757.0], [24.0, 4758.0], [24.1, 4763.0], [24.2, 4764.0], [24.3, 4764.0], [24.4, 4776.0], [24.5, 4776.0], [24.6, 4777.0], [24.7, 4778.0], [24.8, 4778.0], [24.9, 4779.0], [25.0, 4781.0], [25.1, 4781.0], [25.2, 4782.0], [25.3, 4785.0], [25.4, 4785.0], [25.5, 4786.0], [25.6, 4786.0], [25.7, 4787.0], [25.8, 4789.0], [25.9, 4789.0], [26.0, 4792.0], [26.1, 4795.0], [26.2, 4796.0], [26.3, 4801.0], [26.4, 4804.0], [26.5, 4804.0], [26.6, 4806.0], [26.7, 4806.0], [26.8, 4808.0], [26.9, 4813.0], [27.0, 4814.0], [27.1, 4815.0], [27.2, 4815.0], [27.3, 4815.0], [27.4, 4816.0], [27.5, 4817.0], [27.6, 4818.0], [27.7, 4819.0], [27.8, 4822.0], [27.9, 4823.0], [28.0, 4824.0], [28.1, 4826.0], [28.2, 4827.0], [28.3, 4833.0], [28.4, 4839.0], [28.5, 4842.0], [28.6, 4842.0], [28.7, 4846.0], [28.8, 4846.0], [28.9, 4847.0], [29.0, 4848.0], [29.1, 4854.0], [29.2, 4855.0], [29.3, 4858.0], [29.4, 4858.0], [29.5, 4860.0], [29.6, 4861.0], [29.7, 4861.0], [29.8, 4861.0], [29.9, 4865.0], [30.0, 4866.0], [30.1, 4871.0], [30.2, 4874.0], [30.3, 4877.0], [30.4, 4882.0], [30.5, 4883.0], [30.6, 4885.0], [30.7, 4887.0], [30.8, 4890.0], [30.9, 4890.0], [31.0, 4892.0], [31.1, 4896.0], [31.2, 4897.0], [31.3, 4898.0], [31.4, 4900.0], [31.5, 4904.0], [31.6, 4904.0], [31.7, 4906.0], [31.8, 4908.0], [31.9, 4910.0], [32.0, 4911.0], [32.1, 4911.0], [32.2, 4913.0], [32.3, 4916.0], [32.4, 4917.0], [32.5, 4919.0], [32.6, 4922.0], [32.7, 4923.0], [32.8, 4923.0], [32.9, 4923.0], [33.0, 4924.0], [33.1, 4926.0], [33.2, 4929.0], [33.3, 4931.0], [33.4, 4932.0], [33.5, 4939.0], [33.6, 4944.0], [33.7, 4945.0], [33.8, 4954.0], [33.9, 4956.0], [34.0, 4959.0], [34.1, 4960.0], [34.2, 4963.0], [34.3, 4964.0], [34.4, 4964.0], [34.5, 4964.0], [34.6, 4966.0], [34.7, 4967.0], [34.8, 4968.0], [34.9, 4974.0], [35.0, 4975.0], [35.1, 4976.0], [35.2, 4982.0], [35.3, 4987.0], [35.4, 4990.0], [35.5, 4991.0], [35.6, 4993.0], [35.7, 4995.0], [35.8, 4996.0], [35.9, 4997.0], [36.0, 4997.0], [36.1, 4999.0], [36.2, 5005.0], [36.3, 5005.0], [36.4, 5005.0], [36.5, 5006.0], [36.6, 5008.0], [36.7, 5008.0], [36.8, 5016.0], [36.9, 5020.0], [37.0, 5021.0], [37.1, 5024.0], [37.2, 5025.0], [37.3, 5026.0], [37.4, 5027.0], [37.5, 5027.0], [37.6, 5028.0], [37.7, 5029.0], [37.8, 5029.0], [37.9, 5030.0], [38.0, 5031.0], [38.1, 5034.0], [38.2, 5035.0], [38.3, 5037.0], [38.4, 5038.0], [38.5, 5038.0], [38.6, 5044.0], [38.7, 5046.0], [38.8, 5046.0], [38.9, 5047.0], [39.0, 5048.0], [39.1, 5050.0], [39.2, 5050.0], [39.3, 5053.0], [39.4, 5053.0], [39.5, 5054.0], [39.6, 5057.0], [39.7, 5060.0], [39.8, 5064.0], [39.9, 5068.0], [40.0, 5071.0], [40.1, 5074.0], [40.2, 5076.0], [40.3, 5078.0], [40.4, 5078.0], [40.5, 5079.0], [40.6, 5079.0], [40.7, 5079.0], [40.8, 5080.0], [40.9, 5082.0], [41.0, 5092.0], [41.1, 5093.0], [41.2, 5094.0], [41.3, 5094.0], [41.4, 5095.0], [41.5, 5096.0], [41.6, 5098.0], [41.7, 5098.0], [41.8, 5098.0], [41.9, 5099.0], [42.0, 5100.0], [42.1, 5100.0], [42.2, 5101.0], [42.3, 5105.0], [42.4, 5106.0], [42.5, 5106.0], [42.6, 5108.0], [42.7, 5110.0], [42.8, 5112.0], [42.9, 5112.0], [43.0, 5115.0], [43.1, 5115.0], [43.2, 5116.0], [43.3, 5119.0], [43.4, 5123.0], [43.5, 5124.0], [43.6, 5125.0], [43.7, 5125.0], [43.8, 5126.0], [43.9, 5133.0], [44.0, 5135.0], [44.1, 5135.0], [44.2, 5137.0], [44.3, 5138.0], [44.4, 5139.0], [44.5, 5140.0], [44.6, 5144.0], [44.7, 5147.0], [44.8, 5148.0], [44.9, 5150.0], [45.0, 5152.0], [45.1, 5158.0], [45.2, 5159.0], [45.3, 5162.0], [45.4, 5166.0], [45.5, 5167.0], [45.6, 5168.0], [45.7, 5169.0], [45.8, 5173.0], [45.9, 5174.0], [46.0, 5177.0], [46.1, 5180.0], [46.2, 5180.0], [46.3, 5180.0], [46.4, 5182.0], [46.5, 5183.0], [46.6, 5184.0], [46.7, 5186.0], [46.8, 5190.0], [46.9, 5190.0], [47.0, 5191.0], [47.1, 5192.0], [47.2, 5192.0], [47.3, 5197.0], [47.4, 5198.0], [47.5, 5200.0], [47.6, 5204.0], [47.7, 5207.0], [47.8, 5214.0], [47.9, 5215.0], [48.0, 5217.0], [48.1, 5220.0], [48.2, 5220.0], [48.3, 5222.0], [48.4, 5224.0], [48.5, 5225.0], [48.6, 5228.0], [48.7, 5228.0], [48.8, 5230.0], [48.9, 5232.0], [49.0, 5239.0], [49.1, 5246.0], [49.2, 5247.0], [49.3, 5251.0], [49.4, 5252.0], [49.5, 5252.0], [49.6, 5254.0], [49.7, 5255.0], [49.8, 5259.0], [49.9, 5259.0], [50.0, 5260.0], [50.1, 5261.0], [50.2, 5263.0], [50.3, 5267.0], [50.4, 5269.0], [50.5, 5274.0], [50.6, 5275.0], [50.7, 5276.0], [50.8, 5278.0], [50.9, 5290.0], [51.0, 5300.0], [51.1, 5301.0], [51.2, 5305.0], [51.3, 5313.0], [51.4, 5315.0], [51.5, 5321.0], [51.6, 5322.0], [51.7, 5322.0], [51.8, 5326.0], [51.9, 5333.0], [52.0, 5337.0], [52.1, 5337.0], [52.2, 5342.0], [52.3, 5345.0], [52.4, 5345.0], [52.5, 5345.0], [52.6, 5349.0], [52.7, 5351.0], [52.8, 5356.0], [52.9, 5360.0], [53.0, 5361.0], [53.1, 5363.0], [53.2, 5368.0], [53.3, 5369.0], [53.4, 5370.0], [53.5, 5370.0], [53.6, 5370.0], [53.7, 5371.0], [53.8, 5371.0], [53.9, 5376.0], [54.0, 5378.0], [54.1, 5378.0], [54.2, 5387.0], [54.3, 5389.0], [54.4, 5394.0], [54.5, 5395.0], [54.6, 5397.0], [54.7, 5400.0], [54.8, 5402.0], [54.9, 5403.0], [55.0, 5404.0], [55.1, 5413.0], [55.2, 5417.0], [55.3, 5420.0], [55.4, 5421.0], [55.5, 5425.0], [55.6, 5428.0], [55.7, 5440.0], [55.8, 5440.0], [55.9, 5442.0], [56.0, 5444.0], [56.1, 5447.0], [56.2, 5447.0], [56.3, 5448.0], [56.4, 5448.0], [56.5, 5449.0], [56.6, 5451.0], [56.7, 5453.0], [56.8, 5457.0], [56.9, 5458.0], [57.0, 5458.0], [57.1, 5458.0], [57.2, 5459.0], [57.3, 5461.0], [57.4, 5464.0], [57.5, 5465.0], [57.6, 5466.0], [57.7, 5466.0], [57.8, 5466.0], [57.9, 5468.0], [58.0, 5473.0], [58.1, 5476.0], [58.2, 5476.0], [58.3, 5480.0], [58.4, 5485.0], [58.5, 5489.0], [58.6, 5495.0], [58.7, 5496.0], [58.8, 5496.0], [58.9, 5509.0], [59.0, 5510.0], [59.1, 5511.0], [59.2, 5511.0], [59.3, 5513.0], [59.4, 5521.0], [59.5, 5526.0], [59.6, 5527.0], [59.7, 5533.0], [59.8, 5536.0], [59.9, 5548.0], [60.0, 5550.0], [60.1, 5550.0], [60.2, 5552.0], [60.3, 5552.0], [60.4, 5555.0], [60.5, 5555.0], [60.6, 5555.0], [60.7, 5556.0], [60.8, 5558.0], [60.9, 5560.0], [61.0, 5563.0], [61.1, 5568.0], [61.2, 5571.0], [61.3, 5572.0], [61.4, 5574.0], [61.5, 5578.0], [61.6, 5578.0], [61.7, 5582.0], [61.8, 5582.0], [61.9, 5592.0], [62.0, 5599.0], [62.1, 5601.0], [62.2, 5602.0], [62.3, 5611.0], [62.4, 5612.0], [62.5, 5628.0], [62.6, 5630.0], [62.7, 5634.0], [62.8, 5636.0], [62.9, 5640.0], [63.0, 5641.0], [63.1, 5644.0], [63.2, 5645.0], [63.3, 5650.0], [63.4, 5651.0], [63.5, 5652.0], [63.6, 5656.0], [63.7, 5664.0], [63.8, 5666.0], [63.9, 5666.0], [64.0, 5666.0], [64.1, 5668.0], [64.2, 5669.0], [64.3, 5674.0], [64.4, 5679.0], [64.5, 5685.0], [64.6, 5687.0], [64.7, 5691.0], [64.8, 5708.0], [64.9, 5748.0], [65.0, 5748.0], [65.1, 5753.0], [65.2, 5755.0], [65.3, 5755.0], [65.4, 5757.0], [65.5, 5765.0], [65.6, 5769.0], [65.7, 5783.0], [65.8, 5786.0], [65.9, 5787.0], [66.0, 5791.0], [66.1, 5794.0], [66.2, 5807.0], [66.3, 5821.0], [66.4, 5827.0], [66.5, 5852.0], [66.6, 5881.0], [66.7, 5891.0], [66.8, 5922.0], [66.9, 5923.0], [67.0, 5923.0], [67.1, 5941.0], [67.2, 5956.0], [67.3, 5959.0], [67.4, 5977.0], [67.5, 6000.0], [67.6, 6006.0], [67.7, 6009.0], [67.8, 6013.0], [67.9, 6014.0], [68.0, 6036.0], [68.1, 6048.0], [68.2, 6055.0], [68.3, 6066.0], [68.4, 6069.0], [68.5, 6082.0], [68.6, 6098.0], [68.7, 6102.0], [68.8, 6123.0], [68.9, 6135.0], [69.0, 6139.0], [69.1, 6143.0], [69.2, 6257.0], [69.3, 6275.0], [69.4, 6283.0], [69.5, 6295.0], [69.6, 6349.0], [69.7, 6357.0], [69.8, 6365.0], [69.9, 6392.0], [70.0, 6407.0], [70.1, 6415.0], [70.2, 6442.0], [70.3, 6446.0], [70.4, 6450.0], [70.5, 6463.0], [70.6, 6466.0], [70.7, 6479.0], [70.8, 6540.0], [70.9, 6638.0], [71.0, 6648.0], [71.1, 6675.0], [71.2, 6678.0], [71.3, 6752.0], [71.4, 6776.0], [71.5, 6802.0], [71.6, 6834.0], [71.7, 6836.0], [71.8, 6850.0], [71.9, 6850.0], [72.0, 6854.0], [72.1, 6889.0], [72.2, 6919.0], [72.3, 7095.0], [72.4, 7122.0], [72.5, 7132.0], [72.6, 7151.0], [72.7, 7153.0], [72.8, 7195.0], [72.9, 7255.0], [73.0, 7275.0], [73.1, 7290.0], [73.2, 7325.0], [73.3, 7328.0], [73.4, 7471.0], [73.5, 7493.0], [73.6, 7524.0], [73.7, 7658.0], [73.8, 7717.0], [73.9, 8092.0], [74.0, 8152.0], [74.1, 8644.0], [74.2, 9220.0], [74.3, 9449.0], [74.4, 9713.0], [74.5, 9729.0], [74.6, 9794.0], [74.7, 9827.0], [74.8, 10347.0], [74.9, 10855.0], [75.0, 11391.0], [75.1, 11872.0], [75.2, 12365.0], [75.3, 12841.0], [75.4, 13341.0], [75.5, 13935.0], [75.6, 14372.0], [75.7, 14967.0], [75.8, 15795.0], [75.9, 16351.0], [76.0, 16881.0], [76.1, 17392.0], [76.2, 17878.0], [76.3, 18291.0], [76.4, 18872.0], [76.5, 19354.0], [76.6, 19857.0], [76.7, 20458.0], [76.8, 20929.0], [76.9, 21313.0], [77.0, 21842.0], [77.1, 22427.0], [77.2, 22873.0], [77.3, 23347.0], [77.4, 23950.0], [77.5, 24418.0], [77.6, 24907.0], [77.7, 25488.0], [77.8, 25924.0], [77.9, 26584.0], [78.0, 27160.0], [78.1, 27510.0], [78.2, 28123.0], [78.3, 28725.0], [78.4, 29301.0], [78.5, 29653.0], [78.6, 30089.0], [78.7, 30541.0], [78.8, 31103.0], [78.9, 31680.0], [79.0, 32188.0], [79.1, 32198.0], [79.2, 32257.0], [79.3, 32641.0], [79.4, 33263.0], [79.5, 33653.0], [79.6, 34224.0], [79.7, 34652.0], [79.8, 35248.0], [79.9, 35687.0], [80.0, 36112.0], [80.1, 36654.0], [80.2, 37128.0], [80.3, 37631.0], [80.4, 38153.0], [80.5, 38627.0], [80.6, 39261.0], [80.7, 40175.0], [80.8, 40324.0], [80.9, 40733.0], [81.0, 41362.0], [81.1, 41848.0], [81.2, 42335.0], [81.3, 42924.0], [81.4, 43270.0], [81.5, 43816.0], [81.6, 44320.0], [81.7, 44910.0], [81.8, 45462.0], [81.9, 45933.0], [82.0, 46366.0], [82.1, 46897.0], [82.2, 47426.0], [82.3, 48017.0], [82.4, 48586.0], [82.5, 49008.0], [82.6, 49498.0], [82.7, 49940.0], [82.8, 50506.0], [82.9, 51027.0], [83.0, 51550.0], [83.1, 52029.0], [83.2, 52660.0], [83.3, 53196.0], [83.4, 53741.0], [83.5, 54244.0], [83.6, 55039.0], [83.7, 55450.0], [83.8, 55616.0], [83.9, 56051.0], [84.0, 56074.0], [84.1, 56499.0], [84.2, 56975.0], [84.3, 57509.0], [84.4, 58026.0], [84.5, 58536.0], [84.6, 59087.0], [84.7, 59568.0], [84.8, 60117.0], [84.9, 60589.0], [85.0, 61093.0], [85.1, 61651.0], [85.2, 62122.0], [85.3, 62654.0], [85.4, 63186.0], [85.5, 63914.0], [85.6, 64441.0], [85.7, 64695.0], [85.8, 65202.0], [85.9, 65656.0], [86.0, 66218.0], [86.1, 66643.0], [86.2, 67232.0], [86.3, 67661.0], [86.4, 68222.0], [86.5, 68837.0], [86.6, 69081.0], [86.7, 69551.0], [86.8, 70151.0], [86.9, 70590.0], [87.0, 71107.0], [87.1, 71627.0], [87.2, 72129.0], [87.3, 72597.0], [87.4, 73120.0], [87.5, 73596.0], [87.6, 74067.0], [87.7, 74578.0], [87.8, 75194.0], [87.9, 75767.0], [88.0, 76286.0], [88.1, 76641.0], [88.2, 77084.0], [88.3, 77665.0], [88.4, 78110.0], [88.5, 78635.0], [88.6, 79178.0], [88.7, 79687.0], [88.8, 80174.0], [88.9, 80760.0], [89.0, 81282.0], [89.1, 81683.0], [89.2, 82244.0], [89.3, 82820.0], [89.4, 83425.0], [89.5, 84232.0], [89.6, 84344.0], [89.7, 84887.0], [89.8, 85359.0], [89.9, 85788.0], [90.0, 85872.0], [90.1, 86393.0], [90.2, 87009.0], [90.3, 87346.0], [90.4, 87887.0], [90.5, 88364.0], [90.6, 88596.0], [90.7, 89183.0], [90.8, 89604.0], [90.9, 90110.0], [91.0, 90675.0], [91.1, 91167.0], [91.2, 91643.0], [91.3, 92345.0], [91.4, 92869.0], [91.5, 93198.0], [91.6, 93696.0], [91.7, 94494.0], [91.8, 94702.0], [91.9, 95497.0], [92.0, 95960.0], [92.1, 96485.0], [92.2, 97111.0], [92.3, 97623.0], [92.4, 97804.0], [92.5, 98227.0], [92.6, 98791.0], [92.7, 99291.0], [92.8, 99802.0], [92.9, 99992.0], [93.0, 100529.0], [93.1, 101047.0], [93.2, 101557.0], [93.3, 102095.0], [93.4, 102541.0], [93.5, 103002.0], [93.6, 103509.0], [93.7, 104060.0], [93.8, 104572.0], [93.9, 105097.0], [94.0, 105612.0], [94.1, 106119.0], [94.2, 106635.0], [94.3, 107121.0], [94.4, 107612.0], [94.5, 108151.0], [94.6, 108659.0], [94.7, 109118.0], [94.8, 109635.0], [94.9, 110711.0], [95.0, 110924.0], [95.1, 111198.0], [95.2, 111637.0], [95.3, 112168.0], [95.4, 112626.0], [95.5, 113124.0], [95.6, 113699.0], [95.7, 114184.0], [95.8, 114724.0], [95.9, 115254.0], [96.0, 115618.0], [96.1, 116928.0], [96.2, 117869.0], [96.3, 118208.0], [96.4, 118562.0], [96.5, 119079.0], [96.6, 119360.0], [96.7, 120083.0], [96.8, 120423.0], [96.9, 120863.0], [97.0, 121088.0], [97.1, 121507.0], [97.2, 121879.0], [97.3, 122356.0], [97.4, 122753.0], [97.5, 122754.0], [97.6, 122756.0], [97.7, 122758.0], [97.8, 122759.0], [97.9, 122761.0], [98.0, 122765.0], [98.1, 122771.0], [98.2, 122772.0], [98.3, 122773.0], [98.4, 122776.0], [98.5, 122778.0], [98.6, 122784.0], [98.7, 122790.0], [98.8, 122793.0], [98.9, 122793.0], [99.0, 122875.0], [99.1, 123016.0], [99.2, 123071.0], [99.3, 123220.0], [99.4, 123221.0], [99.5, 123234.0], [99.6, 123238.0], [99.7, 123246.0], [99.8, 123270.0], [99.9, 123423.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 2842.0], [0.1, 2916.0], [0.2, 3002.0], [0.3, 3002.0], [0.4, 3241.0], [0.5, 3249.0], [0.6, 3425.0], [0.7, 3532.0], [0.8, 3533.0], [0.9, 3541.0], [1.0, 3630.0], [1.1, 3852.0], [1.2, 3870.0], [1.3, 3889.0], [1.4, 3889.0], [1.5, 3914.0], [1.6, 3945.0], [1.7, 3951.0], [1.8, 3965.0], [1.9, 3969.0], [2.0, 4008.0], [2.1, 4014.0], [2.2, 4017.0], [2.3, 4021.0], [2.4, 4039.0], [2.5, 4063.0], [2.6, 4068.0], [2.7, 4077.0], [2.8, 4085.0], [2.9, 4101.0], [3.0, 4126.0], [3.1, 4131.0], [3.2, 4171.0], [3.3, 4172.0], [3.4, 4178.0], [3.5, 4190.0], [3.6, 4190.0], [3.7, 4192.0], [3.8, 4195.0], [3.9, 4196.0], [4.0, 4197.0], [4.1, 4198.0], [4.2, 4202.0], [4.3, 4204.0], [4.4, 4228.0], [4.5, 4238.0], [4.6, 4240.0], [4.7, 4250.0], [4.8, 4260.0], [4.9, 4263.0], [5.0, 4265.0], [5.1, 4270.0], [5.2, 4270.0], [5.3, 4271.0], [5.4, 4273.0], [5.5, 4274.0], [5.6, 4281.0], [5.7, 4284.0], [5.8, 4289.0], [5.9, 4292.0], [6.0, 4293.0], [6.1, 4295.0], [6.2, 4303.0], [6.3, 4313.0], [6.4, 4319.0], [6.5, 4332.0], [6.6, 4335.0], [6.7, 4336.0], [6.8, 4339.0], [6.9, 4341.0], [7.0, 4348.0], [7.1, 4352.0], [7.2, 4355.0], [7.3, 4357.0], [7.4, 4358.0], [7.5, 4359.0], [7.6, 4360.0], [7.7, 4369.0], [7.8, 4370.0], [7.9, 4374.0], [8.0, 4378.0], [8.1, 4378.0], [8.2, 4379.0], [8.3, 4383.0], [8.4, 4385.0], [8.5, 4387.0], [8.6, 4391.0], [8.7, 4393.0], [8.8, 4397.0], [8.9, 4405.0], [9.0, 4408.0], [9.1, 4409.0], [9.2, 4412.0], [9.3, 4415.0], [9.4, 4416.0], [9.5, 4417.0], [9.6, 4419.0], [9.7, 4424.0], [9.8, 4435.0], [9.9, 4437.0], [10.0, 4440.0], [10.1, 4441.0], [10.2, 4443.0], [10.3, 4447.0], [10.4, 4448.0], [10.5, 4451.0], [10.6, 4452.0], [10.7, 4458.0], [10.8, 4458.0], [10.9, 4461.0], [11.0, 4466.0], [11.1, 4467.0], [11.2, 4474.0], [11.3, 4475.0], [11.4, 4475.0], [11.5, 4479.0], [11.6, 4479.0], [11.7, 4484.0], [11.8, 4487.0], [11.9, 4488.0], [12.0, 4488.0], [12.1, 4488.0], [12.2, 4490.0], [12.3, 4496.0], [12.4, 4496.0], [12.5, 4497.0], [12.6, 4499.0], [12.7, 4502.0], [12.8, 4505.0], [12.9, 4505.0], [13.0, 4510.0], [13.1, 4513.0], [13.2, 4514.0], [13.3, 4515.0], [13.4, 4517.0], [13.5, 4517.0], [13.6, 4519.0], [13.7, 4522.0], [13.8, 4524.0], [13.9, 4524.0], [14.0, 4526.0], [14.1, 4528.0], [14.2, 4535.0], [14.3, 4535.0], [14.4, 4536.0], [14.5, 4536.0], [14.6, 4538.0], [14.7, 4541.0], [14.8, 4543.0], [14.9, 4544.0], [15.0, 4546.0], [15.1, 4548.0], [15.2, 4551.0], [15.3, 4552.0], [15.4, 4552.0], [15.5, 4553.0], [15.6, 4556.0], [15.7, 4564.0], [15.8, 4572.0], [15.9, 4573.0], [16.0, 4576.0], [16.1, 4577.0], [16.2, 4581.0], [16.3, 4581.0], [16.4, 4588.0], [16.5, 4589.0], [16.6, 4593.0], [16.7, 4594.0], [16.8, 4596.0], [16.9, 4599.0], [17.0, 4600.0], [17.1, 4602.0], [17.2, 4605.0], [17.3, 4608.0], [17.4, 4608.0], [17.5, 4609.0], [17.6, 4609.0], [17.7, 4611.0], [17.8, 4611.0], [17.9, 4612.0], [18.0, 4614.0], [18.1, 4614.0], [18.2, 4617.0], [18.3, 4620.0], [18.4, 4622.0], [18.5, 4624.0], [18.6, 4626.0], [18.7, 4630.0], [18.8, 4631.0], [18.9, 4634.0], [19.0, 4641.0], [19.1, 4642.0], [19.2, 4642.0], [19.3, 4644.0], [19.4, 4648.0], [19.5, 4655.0], [19.6, 4660.0], [19.7, 4660.0], [19.8, 4663.0], [19.9, 4664.0], [20.0, 4670.0], [20.1, 4671.0], [20.2, 4671.0], [20.3, 4673.0], [20.4, 4673.0], [20.5, 4674.0], [20.6, 4674.0], [20.7, 4676.0], [20.8, 4676.0], [20.9, 4677.0], [21.0, 4678.0], [21.1, 4680.0], [21.2, 4680.0], [21.3, 4684.0], [21.4, 4685.0], [21.5, 4688.0], [21.6, 4696.0], [21.7, 4700.0], [21.8, 4701.0], [21.9, 4701.0], [22.0, 4704.0], [22.1, 4706.0], [22.2, 4716.0], [22.3, 4718.0], [22.4, 4720.0], [22.5, 4723.0], [22.6, 4725.0], [22.7, 4725.0], [22.8, 4727.0], [22.9, 4729.0], [23.0, 4729.0], [23.1, 4733.0], [23.2, 4738.0], [23.3, 4738.0], [23.4, 4744.0], [23.5, 4745.0], [23.6, 4747.0], [23.7, 4752.0], [23.8, 4754.0], [23.9, 4757.0], [24.0, 4758.0], [24.1, 4763.0], [24.2, 4764.0], [24.3, 4764.0], [24.4, 4776.0], [24.5, 4776.0], [24.6, 4777.0], [24.7, 4778.0], [24.8, 4778.0], [24.9, 4779.0], [25.0, 4781.0], [25.1, 4781.0], [25.2, 4782.0], [25.3, 4785.0], [25.4, 4785.0], [25.5, 4786.0], [25.6, 4786.0], [25.7, 4787.0], [25.8, 4789.0], [25.9, 4789.0], [26.0, 4792.0], [26.1, 4795.0], [26.2, 4796.0], [26.3, 4801.0], [26.4, 4804.0], [26.5, 4804.0], [26.6, 4806.0], [26.7, 4806.0], [26.8, 4808.0], [26.9, 4813.0], [27.0, 4814.0], [27.1, 4815.0], [27.2, 4815.0], [27.3, 4815.0], [27.4, 4816.0], [27.5, 4817.0], [27.6, 4818.0], [27.7, 4819.0], [27.8, 4822.0], [27.9, 4823.0], [28.0, 4824.0], [28.1, 4826.0], [28.2, 4827.0], [28.3, 4833.0], [28.4, 4839.0], [28.5, 4842.0], [28.6, 4842.0], [28.7, 4846.0], [28.8, 4846.0], [28.9, 4847.0], [29.0, 4848.0], [29.1, 4854.0], [29.2, 4855.0], [29.3, 4858.0], [29.4, 4858.0], [29.5, 4860.0], [29.6, 4861.0], [29.7, 4861.0], [29.8, 4861.0], [29.9, 4865.0], [30.0, 4866.0], [30.1, 4871.0], [30.2, 4874.0], [30.3, 4877.0], [30.4, 4882.0], [30.5, 4883.0], [30.6, 4885.0], [30.7, 4887.0], [30.8, 4890.0], [30.9, 4890.0], [31.0, 4892.0], [31.1, 4896.0], [31.2, 4897.0], [31.3, 4898.0], [31.4, 4900.0], [31.5, 4904.0], [31.6, 4904.0], [31.7, 4906.0], [31.8, 4908.0], [31.9, 4910.0], [32.0, 4911.0], [32.1, 4911.0], [32.2, 4913.0], [32.3, 4916.0], [32.4, 4917.0], [32.5, 4919.0], [32.6, 4922.0], [32.7, 4923.0], [32.8, 4923.0], [32.9, 4923.0], [33.0, 4924.0], [33.1, 4926.0], [33.2, 4929.0], [33.3, 4931.0], [33.4, 4932.0], [33.5, 4939.0], [33.6, 4944.0], [33.7, 4945.0], [33.8, 4954.0], [33.9, 4956.0], [34.0, 4959.0], [34.1, 4960.0], [34.2, 4963.0], [34.3, 4964.0], [34.4, 4964.0], [34.5, 4964.0], [34.6, 4966.0], [34.7, 4967.0], [34.8, 4968.0], [34.9, 4974.0], [35.0, 4975.0], [35.1, 4976.0], [35.2, 4982.0], [35.3, 4987.0], [35.4, 4990.0], [35.5, 4991.0], [35.6, 4993.0], [35.7, 4995.0], [35.8, 4996.0], [35.9, 4997.0], [36.0, 4997.0], [36.1, 4999.0], [36.2, 5005.0], [36.3, 5005.0], [36.4, 5005.0], [36.5, 5006.0], [36.6, 5008.0], [36.7, 5008.0], [36.8, 5016.0], [36.9, 5020.0], [37.0, 5021.0], [37.1, 5024.0], [37.2, 5025.0], [37.3, 5026.0], [37.4, 5027.0], [37.5, 5027.0], [37.6, 5028.0], [37.7, 5029.0], [37.8, 5029.0], [37.9, 5030.0], [38.0, 5031.0], [38.1, 5034.0], [38.2, 5035.0], [38.3, 5037.0], [38.4, 5038.0], [38.5, 5038.0], [38.6, 5044.0], [38.7, 5046.0], [38.8, 5046.0], [38.9, 5047.0], [39.0, 5048.0], [39.1, 5050.0], [39.2, 5050.0], [39.3, 5053.0], [39.4, 5053.0], [39.5, 5054.0], [39.6, 5057.0], [39.7, 5060.0], [39.8, 5064.0], [39.9, 5068.0], [40.0, 5071.0], [40.1, 5074.0], [40.2, 5076.0], [40.3, 5078.0], [40.4, 5078.0], [40.5, 5079.0], [40.6, 5079.0], [40.7, 5079.0], [40.8, 5080.0], [40.9, 5082.0], [41.0, 5092.0], [41.1, 5093.0], [41.2, 5094.0], [41.3, 5094.0], [41.4, 5095.0], [41.5, 5096.0], [41.6, 5098.0], [41.7, 5098.0], [41.8, 5098.0], [41.9, 5099.0], [42.0, 5100.0], [42.1, 5100.0], [42.2, 5101.0], [42.3, 5105.0], [42.4, 5106.0], [42.5, 5106.0], [42.6, 5108.0], [42.7, 5110.0], [42.8, 5112.0], [42.9, 5112.0], [43.0, 5115.0], [43.1, 5115.0], [43.2, 5116.0], [43.3, 5119.0], [43.4, 5123.0], [43.5, 5124.0], [43.6, 5125.0], [43.7, 5125.0], [43.8, 5126.0], [43.9, 5133.0], [44.0, 5135.0], [44.1, 5135.0], [44.2, 5137.0], [44.3, 5138.0], [44.4, 5139.0], [44.5, 5140.0], [44.6, 5144.0], [44.7, 5147.0], [44.8, 5148.0], [44.9, 5150.0], [45.0, 5152.0], [45.1, 5158.0], [45.2, 5159.0], [45.3, 5162.0], [45.4, 5166.0], [45.5, 5167.0], [45.6, 5168.0], [45.7, 5169.0], [45.8, 5173.0], [45.9, 5174.0], [46.0, 5177.0], [46.1, 5180.0], [46.2, 5180.0], [46.3, 5180.0], [46.4, 5182.0], [46.5, 5183.0], [46.6, 5184.0], [46.7, 5186.0], [46.8, 5190.0], [46.9, 5190.0], [47.0, 5191.0], [47.1, 5192.0], [47.2, 5192.0], [47.3, 5197.0], [47.4, 5198.0], [47.5, 5200.0], [47.6, 5204.0], [47.7, 5207.0], [47.8, 5214.0], [47.9, 5215.0], [48.0, 5217.0], [48.1, 5220.0], [48.2, 5220.0], [48.3, 5222.0], [48.4, 5224.0], [48.5, 5225.0], [48.6, 5228.0], [48.7, 5228.0], [48.8, 5230.0], [48.9, 5232.0], [49.0, 5239.0], [49.1, 5246.0], [49.2, 5247.0], [49.3, 5251.0], [49.4, 5252.0], [49.5, 5252.0], [49.6, 5254.0], [49.7, 5255.0], [49.8, 5259.0], [49.9, 5259.0], [50.0, 5260.0], [50.1, 5261.0], [50.2, 5263.0], [50.3, 5267.0], [50.4, 5269.0], [50.5, 5274.0], [50.6, 5275.0], [50.7, 5276.0], [50.8, 5278.0], [50.9, 5290.0], [51.0, 5300.0], [51.1, 5301.0], [51.2, 5305.0], [51.3, 5313.0], [51.4, 5315.0], [51.5, 5321.0], [51.6, 5322.0], [51.7, 5322.0], [51.8, 5326.0], [51.9, 5333.0], [52.0, 5337.0], [52.1, 5337.0], [52.2, 5342.0], [52.3, 5345.0], [52.4, 5345.0], [52.5, 5345.0], [52.6, 5349.0], [52.7, 5351.0], [52.8, 5356.0], [52.9, 5360.0], [53.0, 5361.0], [53.1, 5363.0], [53.2, 5368.0], [53.3, 5369.0], [53.4, 5370.0], [53.5, 5370.0], [53.6, 5370.0], [53.7, 5371.0], [53.8, 5371.0], [53.9, 5376.0], [54.0, 5378.0], [54.1, 5378.0], [54.2, 5387.0], [54.3, 5389.0], [54.4, 5394.0], [54.5, 5395.0], [54.6, 5397.0], [54.7, 5400.0], [54.8, 5402.0], [54.9, 5403.0], [55.0, 5404.0], [55.1, 5413.0], [55.2, 5417.0], [55.3, 5420.0], [55.4, 5421.0], [55.5, 5425.0], [55.6, 5428.0], [55.7, 5440.0], [55.8, 5440.0], [55.9, 5442.0], [56.0, 5444.0], [56.1, 5447.0], [56.2, 5447.0], [56.3, 5448.0], [56.4, 5448.0], [56.5, 5449.0], [56.6, 5451.0], [56.7, 5453.0], [56.8, 5457.0], [56.9, 5458.0], [57.0, 5458.0], [57.1, 5458.0], [57.2, 5459.0], [57.3, 5461.0], [57.4, 5464.0], [57.5, 5465.0], [57.6, 5466.0], [57.7, 5466.0], [57.8, 5466.0], [57.9, 5468.0], [58.0, 5473.0], [58.1, 5476.0], [58.2, 5476.0], [58.3, 5480.0], [58.4, 5485.0], [58.5, 5489.0], [58.6, 5495.0], [58.7, 5496.0], [58.8, 5496.0], [58.9, 5509.0], [59.0, 5510.0], [59.1, 5511.0], [59.2, 5511.0], [59.3, 5513.0], [59.4, 5521.0], [59.5, 5526.0], [59.6, 5527.0], [59.7, 5533.0], [59.8, 5536.0], [59.9, 5548.0], [60.0, 5550.0], [60.1, 5550.0], [60.2, 5552.0], [60.3, 5552.0], [60.4, 5555.0], [60.5, 5555.0], [60.6, 5555.0], [60.7, 5556.0], [60.8, 5558.0], [60.9, 5560.0], [61.0, 5563.0], [61.1, 5568.0], [61.2, 5571.0], [61.3, 5572.0], [61.4, 5574.0], [61.5, 5578.0], [61.6, 5578.0], [61.7, 5582.0], [61.8, 5582.0], [61.9, 5592.0], [62.0, 5599.0], [62.1, 5601.0], [62.2, 5602.0], [62.3, 5611.0], [62.4, 5612.0], [62.5, 5628.0], [62.6, 5630.0], [62.7, 5634.0], [62.8, 5636.0], [62.9, 5640.0], [63.0, 5641.0], [63.1, 5644.0], [63.2, 5645.0], [63.3, 5650.0], [63.4, 5651.0], [63.5, 5652.0], [63.6, 5656.0], [63.7, 5664.0], [63.8, 5666.0], [63.9, 5666.0], [64.0, 5666.0], [64.1, 5668.0], [64.2, 5669.0], [64.3, 5674.0], [64.4, 5679.0], [64.5, 5685.0], [64.6, 5687.0], [64.7, 5691.0], [64.8, 5708.0], [64.9, 5748.0], [65.0, 5748.0], [65.1, 5753.0], [65.2, 5755.0], [65.3, 5755.0], [65.4, 5757.0], [65.5, 5765.0], [65.6, 5769.0], [65.7, 5783.0], [65.8, 5786.0], [65.9, 5787.0], [66.0, 5791.0], [66.1, 5794.0], [66.2, 5807.0], [66.3, 5821.0], [66.4, 5827.0], [66.5, 5852.0], [66.6, 5881.0], [66.7, 5891.0], [66.8, 5922.0], [66.9, 5923.0], [67.0, 5923.0], [67.1, 5941.0], [67.2, 5956.0], [67.3, 5959.0], [67.4, 5977.0], [67.5, 6000.0], [67.6, 6006.0], [67.7, 6009.0], [67.8, 6013.0], [67.9, 6014.0], [68.0, 6036.0], [68.1, 6048.0], [68.2, 6055.0], [68.3, 6066.0], [68.4, 6069.0], [68.5, 6082.0], [68.6, 6098.0], [68.7, 6102.0], [68.8, 6123.0], [68.9, 6135.0], [69.0, 6139.0], [69.1, 6143.0], [69.2, 6257.0], [69.3, 6275.0], [69.4, 6283.0], [69.5, 6295.0], [69.6, 6349.0], [69.7, 6357.0], [69.8, 6365.0], [69.9, 6392.0], [70.0, 6407.0], [70.1, 6415.0], [70.2, 6442.0], [70.3, 6446.0], [70.4, 6450.0], [70.5, 6463.0], [70.6, 6466.0], [70.7, 6479.0], [70.8, 6540.0], [70.9, 6638.0], [71.0, 6648.0], [71.1, 6675.0], [71.2, 6678.0], [71.3, 6752.0], [71.4, 6776.0], [71.5, 6802.0], [71.6, 6834.0], [71.7, 6836.0], [71.8, 6850.0], [71.9, 6850.0], [72.0, 6854.0], [72.1, 6889.0], [72.2, 6919.0], [72.3, 7095.0], [72.4, 7122.0], [72.5, 7132.0], [72.6, 7151.0], [72.7, 7153.0], [72.8, 7195.0], [72.9, 7255.0], [73.0, 7275.0], [73.1, 7290.0], [73.2, 7325.0], [73.3, 7328.0], [73.4, 7471.0], [73.5, 7493.0], [73.6, 7524.0], [73.7, 7658.0], [73.8, 7717.0], [73.9, 8092.0], [74.0, 8152.0], [74.1, 8644.0], [74.2, 9220.0], [74.3, 9449.0], [74.4, 9713.0], [74.5, 9729.0], [74.6, 9794.0], [74.7, 9827.0], [74.8, 10347.0], [74.9, 10855.0], [75.0, 11391.0], [75.1, 11872.0], [75.2, 12365.0], [75.3, 12841.0], [75.4, 13341.0], [75.5, 13935.0], [75.6, 14372.0], [75.7, 14967.0], [75.8, 15795.0], [75.9, 16351.0], [76.0, 16881.0], [76.1, 17392.0], [76.2, 17878.0], [76.3, 18291.0], [76.4, 18872.0], [76.5, 19354.0], [76.6, 19857.0], [76.7, 20458.0], [76.8, 20929.0], [76.9, 21313.0], [77.0, 21842.0], [77.1, 22427.0], [77.2, 22873.0], [77.3, 23347.0], [77.4, 23950.0], [77.5, 24418.0], [77.6, 24907.0], [77.7, 25488.0], [77.8, 25924.0], [77.9, 26584.0], [78.0, 27160.0], [78.1, 27510.0], [78.2, 28123.0], [78.3, 28725.0], [78.4, 29301.0], [78.5, 29653.0], [78.6, 30089.0], [78.7, 30541.0], [78.8, 31103.0], [78.9, 31680.0], [79.0, 32188.0], [79.1, 32198.0], [79.2, 32257.0], [79.3, 32641.0], [79.4, 33263.0], [79.5, 33653.0], [79.6, 34224.0], [79.7, 34652.0], [79.8, 35248.0], [79.9, 35687.0], [80.0, 36112.0], [80.1, 36654.0], [80.2, 37128.0], [80.3, 37631.0], [80.4, 38153.0], [80.5, 38627.0], [80.6, 39261.0], [80.7, 40175.0], [80.8, 40324.0], [80.9, 40733.0], [81.0, 41362.0], [81.1, 41848.0], [81.2, 42335.0], [81.3, 42924.0], [81.4, 43270.0], [81.5, 43816.0], [81.6, 44320.0], [81.7, 44910.0], [81.8, 45462.0], [81.9, 45933.0], [82.0, 46366.0], [82.1, 46897.0], [82.2, 47426.0], [82.3, 48017.0], [82.4, 48586.0], [82.5, 49008.0], [82.6, 49498.0], [82.7, 49940.0], [82.8, 50506.0], [82.9, 51027.0], [83.0, 51550.0], [83.1, 52029.0], [83.2, 52660.0], [83.3, 53196.0], [83.4, 53741.0], [83.5, 54244.0], [83.6, 55039.0], [83.7, 55450.0], [83.8, 55616.0], [83.9, 56051.0], [84.0, 56074.0], [84.1, 56499.0], [84.2, 56975.0], [84.3, 57509.0], [84.4, 58026.0], [84.5, 58536.0], [84.6, 59087.0], [84.7, 59568.0], [84.8, 60117.0], [84.9, 60589.0], [85.0, 61093.0], [85.1, 61651.0], [85.2, 62122.0], [85.3, 62654.0], [85.4, 63186.0], [85.5, 63914.0], [85.6, 64441.0], [85.7, 64695.0], [85.8, 65202.0], [85.9, 65656.0], [86.0, 66218.0], [86.1, 66643.0], [86.2, 67232.0], [86.3, 67661.0], [86.4, 68222.0], [86.5, 68837.0], [86.6, 69081.0], [86.7, 69551.0], [86.8, 70151.0], [86.9, 70590.0], [87.0, 71107.0], [87.1, 71627.0], [87.2, 72129.0], [87.3, 72597.0], [87.4, 73120.0], [87.5, 73596.0], [87.6, 74067.0], [87.7, 74578.0], [87.8, 75194.0], [87.9, 75767.0], [88.0, 76286.0], [88.1, 76641.0], [88.2, 77084.0], [88.3, 77665.0], [88.4, 78110.0], [88.5, 78635.0], [88.6, 79178.0], [88.7, 79687.0], [88.8, 80174.0], [88.9, 80760.0], [89.0, 81282.0], [89.1, 81683.0], [89.2, 82244.0], [89.3, 82820.0], [89.4, 83425.0], [89.5, 84232.0], [89.6, 84344.0], [89.7, 84887.0], [89.8, 85359.0], [89.9, 85788.0], [90.0, 85872.0], [90.1, 86393.0], [90.2, 87009.0], [90.3, 87346.0], [90.4, 87887.0], [90.5, 88364.0], [90.6, 88596.0], [90.7, 89183.0], [90.8, 89604.0], [90.9, 90110.0], [91.0, 90675.0], [91.1, 91167.0], [91.2, 91643.0], [91.3, 92345.0], [91.4, 92869.0], [91.5, 93198.0], [91.6, 93696.0], [91.7, 94494.0], [91.8, 94702.0], [91.9, 95497.0], [92.0, 95960.0], [92.1, 96485.0], [92.2, 97111.0], [92.3, 97623.0], [92.4, 97804.0], [92.5, 98227.0], [92.6, 98791.0], [92.7, 99291.0], [92.8, 99802.0], [92.9, 99992.0], [93.0, 100529.0], [93.1, 101047.0], [93.2, 101557.0], [93.3, 102095.0], [93.4, 102541.0], [93.5, 103002.0], [93.6, 103509.0], [93.7, 104060.0], [93.8, 104572.0], [93.9, 105097.0], [94.0, 105612.0], [94.1, 106119.0], [94.2, 106635.0], [94.3, 107121.0], [94.4, 107612.0], [94.5, 108151.0], [94.6, 108659.0], [94.7, 109118.0], [94.8, 109635.0], [94.9, 110711.0], [95.0, 110924.0], [95.1, 111198.0], [95.2, 111637.0], [95.3, 112168.0], [95.4, 112626.0], [95.5, 113124.0], [95.6, 113699.0], [95.7, 114184.0], [95.8, 114724.0], [95.9, 115254.0], [96.0, 115618.0], [96.1, 116928.0], [96.2, 117869.0], [96.3, 118208.0], [96.4, 118562.0], [96.5, 119079.0], [96.6, 119360.0], [96.7, 120083.0], [96.8, 120423.0], [96.9, 120863.0], [97.0, 121088.0], [97.1, 121507.0], [97.2, 121879.0], [97.3, 122356.0], [97.4, 122753.0], [97.5, 122754.0], [97.6, 122756.0], [97.7, 122758.0], [97.8, 122759.0], [97.9, 122761.0], [98.0, 122765.0], [98.1, 122771.0], [98.2, 122772.0], [98.3, 122773.0], [98.4, 122776.0], [98.5, 122778.0], [98.6, 122784.0], [98.7, 122790.0], [98.8, 122793.0], [98.9, 122793.0], [99.0, 122875.0], [99.1, 123016.0], [99.2, 123071.0], [99.3, 123220.0], [99.4, 123221.0], [99.5, 123234.0], [99.6, 123238.0], [99.7, 123246.0], [99.8, 123270.0], [99.9, 123423.0]], "isOverall": false, "label": "https://nashik.ppbharti.in/Police_Patil/Home/Index", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2800.0, "maxY": 58.0, "series": [{"data": [[73100.0, 1.0], [84300.0, 1.0], [88300.0, 1.0], [89100.0, 1.0], [92300.0, 1.0], [93100.0, 1.0], [94700.0, 1.0], [97100.0, 1.0], [98700.0, 1.0], [103500.0, 1.0], [109100.0, 1.0], [110700.0, 1.0], [113100.0, 1.0], [114700.0, 1.0], [122700.0, 16.0], [36100.0, 1.0], [38100.0, 1.0], [40100.0, 1.0], [41300.0, 1.0], [42900.0, 1.0], [44900.0, 1.0], [48500.0, 1.0], [50500.0, 1.0], [53700.0, 1.0], [56900.0, 1.0], [58500.0, 1.0], [60100.0, 1.0], [60500.0, 1.0], [62100.0, 1.0], [66600.0, 1.0], [68200.0, 1.0], [69000.0, 1.0], [76200.0, 1.0], [77000.0, 1.0], [78600.0, 1.0], [83400.0, 1.0], [84200.0, 1.0], [85800.0, 1.0], [90600.0, 1.0], [95400.0, 1.0], [97800.0, 1.0], [101000.0, 1.0], [105000.0, 1.0], [106600.0, 1.0], [117800.0, 1.0], [121000.0, 1.0], [121800.0, 1.0], [123400.0, 1.0], [2800.0, 1.0], [2900.0, 1.0], [3000.0, 1.0], [3200.0, 3.0], [3400.0, 1.0], [3500.0, 3.0], [3600.0, 1.0], [3800.0, 3.0], [3900.0, 5.0], [4000.0, 9.0], [4100.0, 13.0], [4200.0, 21.0], [4300.0, 27.0], [4500.0, 43.0], [4600.0, 47.0], [4400.0, 38.0], [70500.0, 1.0], [72100.0, 1.0], [4700.0, 45.0], [4800.0, 51.0], [74500.0, 1.0], [4900.0, 48.0], [5000.0, 58.0], [5100.0, 55.0], [80100.0, 1.0], [5300.0, 37.0], [5200.0, 35.0], [85700.0, 1.0], [5400.0, 42.0], [5600.0, 27.0], [5500.0, 32.0], [87300.0, 1.0], [5700.0, 14.0], [5800.0, 6.0], [6000.0, 12.0], [6100.0, 5.0], [5900.0, 7.0], [6200.0, 4.0], [6300.0, 4.0], [6400.0, 8.0], [6600.0, 4.0], [6500.0, 1.0], [102500.0, 1.0], [6800.0, 7.0], [6700.0, 2.0], [6900.0, 1.0], [108100.0, 1.0], [7000.0, 1.0], [7100.0, 5.0], [112100.0, 1.0], [7200.0, 4.0], [7300.0, 2.0], [7400.0, 2.0], [116900.0, 1.0], [118500.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [119300.0, 1.0], [7700.0, 1.0], [8000.0, 1.0], [8100.0, 1.0], [8600.0, 1.0], [9200.0, 1.0], [9700.0, 3.0], [9400.0, 1.0], [9800.0, 1.0], [10300.0, 1.0], [10800.0, 1.0], [11300.0, 1.0], [11800.0, 1.0], [12300.0, 1.0], [12800.0, 1.0], [13300.0, 1.0], [13900.0, 1.0], [14300.0, 1.0], [14900.0, 1.0], [15700.0, 1.0], [16300.0, 1.0], [16800.0, 1.0], [17800.0, 1.0], [18200.0, 1.0], [18800.0, 1.0], [19800.0, 1.0], [20400.0, 1.0], [21800.0, 1.0], [22400.0, 1.0], [22800.0, 1.0], [24400.0, 1.0], [25400.0, 1.0], [29600.0, 1.0], [30000.0, 1.0], [31600.0, 1.0], [32200.0, 1.0], [32600.0, 1.0], [33200.0, 1.0], [33600.0, 1.0], [35200.0, 1.0], [35600.0, 1.0], [37600.0, 1.0], [39200.0, 1.0], [43200.0, 1.0], [46800.0, 1.0], [48000.0, 1.0], [52000.0, 1.0], [55600.0, 1.0], [56000.0, 2.0], [56400.0, 1.0], [58000.0, 1.0], [61600.0, 1.0], [64400.0, 1.0], [65200.0, 1.0], [65600.0, 1.0], [67200.0, 1.0], [68800.0, 1.0], [77600.0, 1.0], [81600.0, 1.0], [84800.0, 1.0], [89600.0, 1.0], [92800.0, 1.0], [93600.0, 1.0], [94400.0, 1.0], [97600.0, 1.0], [99200.0, 1.0], [104000.0, 1.0], [105600.0, 1.0], [109600.0, 1.0], [113600.0, 1.0], [115200.0, 1.0], [120000.0, 1.0], [120800.0, 1.0], [123200.0, 6.0], [69500.0, 1.0], [71100.0, 1.0], [73500.0, 1.0], [75100.0, 1.0], [79100.0, 1.0], [80700.0, 1.0], [86300.0, 1.0], [91100.0, 1.0], [95900.0, 1.0], [99900.0, 1.0], [101500.0, 1.0], [107100.0, 1.0], [111100.0, 1.0], [121500.0, 1.0], [122300.0, 1.0], [37100.0, 1.0], [40300.0, 1.0], [40700.0, 1.0], [42300.0, 1.0], [44300.0, 1.0], [45900.0, 1.0], [46300.0, 1.0], [49900.0, 1.0], [51500.0, 1.0], [53100.0, 1.0], [57500.0, 1.0], [59500.0, 1.0], [63100.0, 1.0], [63900.0, 1.0], [66200.0, 1.0], [76600.0, 1.0], [82200.0, 1.0], [87000.0, 1.0], [87800.0, 1.0], [98200.0, 1.0], [99800.0, 1.0], [103000.0, 1.0], [108600.0, 1.0], [112600.0, 1.0], [118200.0, 1.0], [119000.0, 1.0], [123000.0, 2.0], [70100.0, 1.0], [72500.0, 1.0], [75700.0, 1.0], [78100.0, 1.0], [85300.0, 1.0], [88500.0, 1.0], [90100.0, 1.0], [100500.0, 1.0], [104500.0, 1.0], [106100.0, 1.0], [110900.0, 1.0], [114100.0, 1.0], [17300.0, 1.0], [19300.0, 1.0], [20900.0, 1.0], [21300.0, 1.0], [23300.0, 1.0], [23900.0, 1.0], [24900.0, 1.0], [25900.0, 1.0], [26500.0, 1.0], [27100.0, 1.0], [27500.0, 1.0], [28100.0, 1.0], [28700.0, 1.0], [29300.0, 1.0], [30500.0, 1.0], [31100.0, 1.0], [32100.0, 2.0], [34200.0, 1.0], [34600.0, 1.0], [36600.0, 1.0], [38600.0, 1.0], [41800.0, 1.0], [43800.0, 1.0], [45400.0, 1.0], [47400.0, 1.0], [49000.0, 1.0], [49400.0, 1.0], [51000.0, 1.0], [52600.0, 1.0], [54200.0, 1.0], [55000.0, 1.0], [55400.0, 1.0], [59000.0, 1.0], [61000.0, 1.0], [62600.0, 1.0], [64600.0, 1.0], [67600.0, 1.0], [71600.0, 1.0], [74000.0, 1.0], [79600.0, 1.0], [81200.0, 1.0], [82800.0, 1.0], [91600.0, 1.0], [96400.0, 1.0], [102000.0, 1.0], [107600.0, 1.0], [111600.0, 1.0], [115600.0, 1.0], [120400.0, 1.0], [122800.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[73100.0, 1.0], [84300.0, 1.0], [88300.0, 1.0], [89100.0, 1.0], [92300.0, 1.0], [93100.0, 1.0], [94700.0, 1.0], [97100.0, 1.0], [98700.0, 1.0], [103500.0, 1.0], [109100.0, 1.0], [110700.0, 1.0], [113100.0, 1.0], [114700.0, 1.0], [122700.0, 16.0], [36100.0, 1.0], [38100.0, 1.0], [40100.0, 1.0], [41300.0, 1.0], [42900.0, 1.0], [44900.0, 1.0], [48500.0, 1.0], [50500.0, 1.0], [53700.0, 1.0], [56900.0, 1.0], [58500.0, 1.0], [60100.0, 1.0], [60500.0, 1.0], [62100.0, 1.0], [66600.0, 1.0], [68200.0, 1.0], [69000.0, 1.0], [76200.0, 1.0], [77000.0, 1.0], [78600.0, 1.0], [83400.0, 1.0], [84200.0, 1.0], [85800.0, 1.0], [90600.0, 1.0], [95400.0, 1.0], [97800.0, 1.0], [101000.0, 1.0], [105000.0, 1.0], [106600.0, 1.0], [117800.0, 1.0], [121000.0, 1.0], [121800.0, 1.0], [123400.0, 1.0], [2800.0, 1.0], [2900.0, 1.0], [3000.0, 1.0], [3200.0, 3.0], [3400.0, 1.0], [3500.0, 3.0], [3600.0, 1.0], [3800.0, 3.0], [3900.0, 5.0], [4000.0, 9.0], [4100.0, 13.0], [4200.0, 21.0], [4300.0, 27.0], [4500.0, 43.0], [4600.0, 47.0], [4400.0, 38.0], [70500.0, 1.0], [72100.0, 1.0], [4700.0, 45.0], [4800.0, 51.0], [74500.0, 1.0], [4900.0, 48.0], [5000.0, 58.0], [5100.0, 55.0], [80100.0, 1.0], [5300.0, 37.0], [5200.0, 35.0], [85700.0, 1.0], [5400.0, 42.0], [5600.0, 27.0], [5500.0, 32.0], [87300.0, 1.0], [5700.0, 14.0], [5800.0, 6.0], [6000.0, 12.0], [6100.0, 5.0], [5900.0, 7.0], [6200.0, 4.0], [6300.0, 4.0], [6400.0, 8.0], [6600.0, 4.0], [6500.0, 1.0], [102500.0, 1.0], [6800.0, 7.0], [6700.0, 2.0], [6900.0, 1.0], [108100.0, 1.0], [7000.0, 1.0], [7100.0, 5.0], [112100.0, 1.0], [7200.0, 4.0], [7300.0, 2.0], [7400.0, 2.0], [116900.0, 1.0], [118500.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [119300.0, 1.0], [7700.0, 1.0], [8000.0, 1.0], [8100.0, 1.0], [8600.0, 1.0], [9200.0, 1.0], [9700.0, 3.0], [9400.0, 1.0], [9800.0, 1.0], [10300.0, 1.0], [10800.0, 1.0], [11300.0, 1.0], [11800.0, 1.0], [12300.0, 1.0], [12800.0, 1.0], [13300.0, 1.0], [13900.0, 1.0], [14300.0, 1.0], [14900.0, 1.0], [15700.0, 1.0], [16300.0, 1.0], [16800.0, 1.0], [17800.0, 1.0], [18200.0, 1.0], [18800.0, 1.0], [19800.0, 1.0], [20400.0, 1.0], [21800.0, 1.0], [22400.0, 1.0], [22800.0, 1.0], [24400.0, 1.0], [25400.0, 1.0], [29600.0, 1.0], [30000.0, 1.0], [31600.0, 1.0], [32200.0, 1.0], [32600.0, 1.0], [33200.0, 1.0], [33600.0, 1.0], [35200.0, 1.0], [35600.0, 1.0], [37600.0, 1.0], [39200.0, 1.0], [43200.0, 1.0], [46800.0, 1.0], [48000.0, 1.0], [52000.0, 1.0], [55600.0, 1.0], [56000.0, 2.0], [56400.0, 1.0], [58000.0, 1.0], [61600.0, 1.0], [64400.0, 1.0], [65200.0, 1.0], [65600.0, 1.0], [67200.0, 1.0], [68800.0, 1.0], [77600.0, 1.0], [81600.0, 1.0], [84800.0, 1.0], [89600.0, 1.0], [92800.0, 1.0], [93600.0, 1.0], [94400.0, 1.0], [97600.0, 1.0], [99200.0, 1.0], [104000.0, 1.0], [105600.0, 1.0], [109600.0, 1.0], [113600.0, 1.0], [115200.0, 1.0], [120000.0, 1.0], [120800.0, 1.0], [123200.0, 6.0], [69500.0, 1.0], [71100.0, 1.0], [73500.0, 1.0], [75100.0, 1.0], [79100.0, 1.0], [80700.0, 1.0], [86300.0, 1.0], [91100.0, 1.0], [95900.0, 1.0], [99900.0, 1.0], [101500.0, 1.0], [107100.0, 1.0], [111100.0, 1.0], [121500.0, 1.0], [122300.0, 1.0], [37100.0, 1.0], [40300.0, 1.0], [40700.0, 1.0], [42300.0, 1.0], [44300.0, 1.0], [45900.0, 1.0], [46300.0, 1.0], [49900.0, 1.0], [51500.0, 1.0], [53100.0, 1.0], [57500.0, 1.0], [59500.0, 1.0], [63100.0, 1.0], [63900.0, 1.0], [66200.0, 1.0], [76600.0, 1.0], [82200.0, 1.0], [87000.0, 1.0], [87800.0, 1.0], [98200.0, 1.0], [99800.0, 1.0], [103000.0, 1.0], [108600.0, 1.0], [112600.0, 1.0], [118200.0, 1.0], [119000.0, 1.0], [123000.0, 2.0], [70100.0, 1.0], [72500.0, 1.0], [75700.0, 1.0], [78100.0, 1.0], [85300.0, 1.0], [88500.0, 1.0], [90100.0, 1.0], [100500.0, 1.0], [104500.0, 1.0], [106100.0, 1.0], [110900.0, 1.0], [114100.0, 1.0], [17300.0, 1.0], [19300.0, 1.0], [20900.0, 1.0], [21300.0, 1.0], [23300.0, 1.0], [23900.0, 1.0], [24900.0, 1.0], [25900.0, 1.0], [26500.0, 1.0], [27100.0, 1.0], [27500.0, 1.0], [28100.0, 1.0], [28700.0, 1.0], [29300.0, 1.0], [30500.0, 1.0], [31100.0, 1.0], [32100.0, 2.0], [34200.0, 1.0], [34600.0, 1.0], [36600.0, 1.0], [38600.0, 1.0], [41800.0, 1.0], [43800.0, 1.0], [45400.0, 1.0], [47400.0, 1.0], [49000.0, 1.0], [49400.0, 1.0], [51000.0, 1.0], [52600.0, 1.0], [54200.0, 1.0], [55000.0, 1.0], [55400.0, 1.0], [59000.0, 1.0], [61000.0, 1.0], [62600.0, 1.0], [64600.0, 1.0], [67600.0, 1.0], [71600.0, 1.0], [74000.0, 1.0], [79600.0, 1.0], [81200.0, 1.0], [82800.0, 1.0], [91600.0, 1.0], [96400.0, 1.0], [102000.0, 1.0], [107600.0, 1.0], [111600.0, 1.0], [115600.0, 1.0], [120400.0, 1.0], [122800.0, 1.0]], "isOverall": false, "label": "https://nashik.ppbharti.in/Police_Patil/Home/Index", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 123400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 24.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 976.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 976.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 24.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 28.345454545454547, "minX": 1.69666176E12, "maxY": 285.34524530587527, "series": [{"data": [[1.69666182E12, 285.34524530587527], [1.69666194E12, 28.345454545454547], [1.69666176E12, 213.0], [1.69666188E12, 114.5]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69666194E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4085.0, "minX": 1.0, "maxY": 123423.0, "series": [{"data": [[2.0, 122790.0], [5.0, 122772.0], [6.0, 122758.0], [9.0, 123234.0], [10.0, 122863.0], [11.0, 122756.0], [13.0, 123006.5], [14.0, 122793.0], [17.0, 122939.33333333333], [18.0, 122773.0], [19.0, 123246.0], [21.0, 122887.5], [25.0, 122997.75], [26.0, 122875.0], [27.0, 122356.0], [28.0, 121879.0], [29.0, 121507.0], [30.0, 121088.0], [31.0, 120863.0], [33.0, 120083.0], [32.0, 120423.0], [35.0, 119079.0], [34.0, 119360.0], [37.0, 118208.0], [36.0, 118562.0], [39.0, 116928.0], [38.0, 117869.0], [41.0, 115254.0], [40.0, 115618.0], [43.0, 114184.0], [42.0, 114724.0], [45.0, 113124.0], [44.0, 113699.0], [47.0, 112168.0], [46.0, 112626.0], [49.0, 111198.0], [48.0, 111637.0], [51.0, 110711.0], [50.0, 110924.0], [53.0, 109118.0], [52.0, 109635.0], [55.0, 108151.0], [54.0, 108659.0], [57.0, 107121.0], [56.0, 107612.0], [59.0, 106119.0], [58.0, 106635.0], [61.0, 105097.0], [60.0, 105612.0], [63.0, 104060.0], [62.0, 104572.0], [67.0, 102095.0], [66.0, 102541.0], [65.0, 103002.0], [64.0, 103509.0], [71.0, 99992.0], [70.0, 100529.0], [69.0, 101047.0], [68.0, 101557.0], [75.0, 98227.0], [74.0, 98791.0], [73.0, 99291.0], [72.0, 99802.0], [79.0, 96485.0], [78.0, 97111.0], [77.0, 97623.0], [76.0, 97804.0], [83.0, 94494.0], [82.0, 94702.0], [81.0, 95497.0], [80.0, 95960.0], [87.0, 92345.0], [86.0, 92869.0], [85.0, 93198.0], [84.0, 93696.0], [91.0, 90110.0], [90.0, 90675.0], [89.0, 91167.0], [88.0, 91643.0], [95.0, 88364.0], [94.0, 88596.0], [93.0, 89183.0], [92.0, 89604.0], [99.0, 86393.0], [98.0, 87009.0], [97.0, 87346.0], [96.0, 87887.0], [103.0, 84887.0], [102.0, 85359.0], [101.0, 85788.0], [100.0, 85872.0], [107.0, 82820.0], [106.0, 83425.0], [105.0, 84232.0], [104.0, 84344.0], [111.0, 80760.0], [110.0, 81282.0], [109.0, 81683.0], [108.0, 82244.0], [115.0, 78635.0], [114.0, 79178.0], [113.0, 79687.0], [112.0, 80174.0], [119.0, 76641.0], [118.0, 77084.0], [117.0, 77665.0], [116.0, 78110.0], [123.0, 74578.0], [122.0, 75194.0], [121.0, 75767.0], [120.0, 76286.0], [127.0, 72597.0], [126.0, 73120.0], [125.0, 73596.0], [124.0, 74067.0], [135.0, 68837.0], [134.0, 69081.0], [133.0, 69551.0], [132.0, 70151.0], [131.0, 70590.0], [130.0, 71107.0], [129.0, 71627.0], [128.0, 72129.0], [143.0, 64695.0], [142.0, 65202.0], [141.0, 65656.0], [140.0, 66218.0], [139.0, 66643.0], [138.0, 67232.0], [137.0, 67661.0], [136.0, 68222.0], [151.0, 60589.0], [150.0, 61093.0], [149.0, 61651.0], [148.0, 62122.0], [147.0, 62654.0], [146.0, 63186.0], [145.0, 63914.0], [144.0, 64441.0], [159.0, 56499.0], [158.0, 56975.0], [157.0, 57509.0], [156.0, 58026.0], [155.0, 58536.0], [154.0, 59087.0], [153.0, 59568.0], [152.0, 60117.0], [167.0, 53196.0], [166.0, 53741.0], [165.0, 54244.0], [164.0, 55039.0], [163.0, 55450.0], [162.0, 55616.0], [161.0, 56074.0], [160.0, 56051.0], [175.0, 49008.0], [174.0, 49498.0], [173.0, 49940.0], [172.0, 50506.0], [171.0, 51027.0], [170.0, 51550.0], [169.0, 52029.0], [168.0, 52660.0], [183.0, 25337.5], [182.0, 25624.5], [181.0, 25408.0], [180.0, 26060.5], [179.0, 46897.0], [178.0, 47426.0], [177.0, 48017.0], [176.0, 48586.0], [191.0, 22503.0], [190.0, 12289.6], [189.0, 12335.6], [188.0, 16838.0], [187.0, 12470.2], [186.0, 14175.5], [185.0, 14846.0], [184.0, 17873.333333333336], [199.0, 12912.25], [198.0, 15062.666666666666], [197.0, 11057.4], [195.0, 15692.666666666666], [192.0, 16466.666666666664], [196.0, 15915.666666666666], [194.0, 22281.0], [193.0, 16949.333333333336], [207.0, 8729.4], [206.0, 7790.2], [205.0, 9093.88888888889], [204.0, 12345.0], [202.0, 11796.75], [201.0, 12401.0], [203.0, 11770.0], [200.0, 14522.333333333334], [212.0, 9370.333333333334], [210.0, 8502.111111111111], [209.0, 10067.333333333332], [208.0, 8179.8], [211.0, 10055.5], [214.0, 10663.6], [213.0, 8857.666666666666], [215.0, 9056.625], [216.0, 6997.461538461539], [218.0, 11803.0], [223.0, 15628.5], [222.0, 15647.5], [221.0, 12907.333333333332], [219.0, 13028.666666666668], [220.0, 27160.0], [217.0, 28725.0], [226.0, 8689.833333333334], [229.0, 8930.4], [228.0, 9301.8], [227.0, 11502.666666666668], [230.0, 7670.5], [231.0, 13470.5], [225.0, 12779.0], [224.0, 24907.0], [235.0, 10383.333333333332], [234.0, 12805.0], [233.0, 13054.5], [232.0, 13242.0], [239.0, 8068.4], [237.0, 10167.666666666666], [238.0, 11990.0], [236.0, 18872.0], [243.0, 8765.333333333334], [242.0, 10946.5], [241.0, 11164.0], [240.0, 9588.0], [247.0, 12841.0], [246.0, 13341.0], [245.0, 13935.0], [244.0, 14372.0], [255.0, 6665.333333333333], [254.0, 6468.0], [253.0, 6392.333333333333], [252.0, 6791.666666666667], [251.0, 7983.5], [250.0, 11391.0], [249.0, 11872.0], [248.0, 12365.0], [259.0, 5776.2], [263.0, 5274.857142857143], [262.0, 5863.4], [261.0, 6262.5], [260.0, 6558.0], [265.0, 5182.8], [266.0, 5282.25], [267.0, 4940.5], [264.0, 5472.333333333333], [268.0, 4706.5], [270.0, 4641.0], [269.0, 4907.666666666667], [271.0, 4722.4], [258.0, 6367.666666666667], [257.0, 7039.0], [256.0, 6322.0], [284.0, 4629.8], [286.0, 4553.333333333333], [287.0, 4631.642857142857], [281.0, 4748.666666666667], [280.0, 4776.666666666667], [285.0, 4812.833333333334], [283.0, 4647.571428571428], [282.0, 4474.0], [279.0, 4671.4], [273.0, 4607.571428571428], [272.0, 4715.857142857143], [275.0, 4760.6], [274.0, 4624.25], [278.0, 4939.799999999999], [277.0, 4781.555555555556], [276.0, 4722.75], [302.0, 4936.0], [301.0, 4860.75], [303.0, 4739.333333333333], [300.0, 4728.666666666667], [299.0, 4866.75], [298.0, 4809.5], [297.0, 4724.333333333333], [296.0, 5022.0], [294.0, 5041.5], [291.0, 4814.0], [290.0, 4712.875], [289.0, 4574.428571428572], [288.0, 5059.166666666666], [295.0, 4085.0], [293.0, 4701.666666666667], [292.0, 4609.833333333334], [307.0, 4761.5], [311.0, 4934.5], [312.0, 4720.5], [313.0, 5016.0], [315.0, 4898.0], [314.0, 4996.0], [310.0, 4385.0], [309.0, 4759.5], [308.0, 4997.0], [306.0, 4768.5], [305.0, 4736.0], [304.0, 4775.5], [319.0, 4846.0], [318.0, 4858.0], [317.0, 4826.0], [316.0, 4858.0], [334.0, 4536.0], [329.0, 4620.0], [335.0, 4820.0], [331.0, 4767.5], [330.0, 4705.0], [333.0, 4487.0], [332.0, 4593.0], [328.0, 5031.0], [327.0, 5050.0], [321.0, 4776.0], [320.0, 4966.0], [323.0, 4676.0], [322.0, 4890.0], [326.0, 4677.0], [325.0, 4599.0], [324.0, 4648.0], [351.0, 5003.428571428572], [347.0, 4711.333333333333], [349.0, 4755.0], [350.0, 4671.0], [336.0, 4906.0], [337.0, 4737.0], [348.0, 4424.0], [339.0, 4911.0], [346.0, 4767.0], [345.0, 4842.5], [344.0, 4604.5], [343.0, 5060.0], [342.0, 4638.0], [341.0, 4770.333333333333], [340.0, 4927.5], [366.0, 5005.5], [367.0, 5209.833333333334], [365.0, 5076.625], [364.0, 4938.750000000001], [363.0, 4973.5], [362.0, 4945.000000000001], [361.0, 5158.714285714286], [360.0, 5225.888888888889], [358.0, 5108.0], [355.0, 5045.75], [354.0, 4902.666666666667], [353.0, 4954.666666666667], [359.0, 5018.8], [352.0, 4799.0], [357.0, 5103.625], [356.0, 4964.0], [368.0, 5175.833333333334], [370.0, 5095.3], [369.0, 5134.166666666667], [371.0, 5257.3125], [381.0, 5129.8], [380.0, 5116.25], [383.0, 5018.2], [382.0, 5140.5], [377.0, 5395.6], [379.0, 5217.0], [378.0, 5114.5], [376.0, 5096.0], [375.0, 5073.4], [374.0, 5330.0], [373.0, 5037.666666666666], [372.0, 5210.2], [391.0, 5279.0], [389.0, 5282.333333333333], [388.0, 4827.0], [387.0, 5305.5], [386.0, 5250.0], [385.0, 5014.0], [384.0, 5387.0], [393.0, 5159.0], [392.0, 5035.0], [390.0, 6123.0], [1.0, 123423.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[250.94199999999964, 22058.794999999995]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 122790.0], [5.0, 122772.0], [6.0, 122758.0], [9.0, 123234.0], [10.0, 122863.0], [11.0, 122756.0], [13.0, 123006.5], [14.0, 122793.0], [17.0, 122939.33333333333], [18.0, 122773.0], [19.0, 123246.0], [21.0, 122887.5], [25.0, 122997.75], [26.0, 122875.0], [27.0, 122356.0], [28.0, 121879.0], [29.0, 121507.0], [30.0, 121088.0], [31.0, 120863.0], [33.0, 120083.0], [32.0, 120423.0], [35.0, 119079.0], [34.0, 119360.0], [37.0, 118208.0], [36.0, 118562.0], [39.0, 116928.0], [38.0, 117869.0], [41.0, 115254.0], [40.0, 115618.0], [43.0, 114184.0], [42.0, 114724.0], [45.0, 113124.0], [44.0, 113699.0], [47.0, 112168.0], [46.0, 112626.0], [49.0, 111198.0], [48.0, 111637.0], [51.0, 110711.0], [50.0, 110924.0], [53.0, 109118.0], [52.0, 109635.0], [55.0, 108151.0], [54.0, 108659.0], [57.0, 107121.0], [56.0, 107612.0], [59.0, 106119.0], [58.0, 106635.0], [61.0, 105097.0], [60.0, 105612.0], [63.0, 104060.0], [62.0, 104572.0], [67.0, 102095.0], [66.0, 102541.0], [65.0, 103002.0], [64.0, 103509.0], [71.0, 99992.0], [70.0, 100529.0], [69.0, 101047.0], [68.0, 101557.0], [75.0, 98227.0], [74.0, 98791.0], [73.0, 99291.0], [72.0, 99802.0], [79.0, 96485.0], [78.0, 97111.0], [77.0, 97623.0], [76.0, 97804.0], [83.0, 94494.0], [82.0, 94702.0], [81.0, 95497.0], [80.0, 95960.0], [87.0, 92345.0], [86.0, 92869.0], [85.0, 93198.0], [84.0, 93696.0], [91.0, 90110.0], [90.0, 90675.0], [89.0, 91167.0], [88.0, 91643.0], [95.0, 88364.0], [94.0, 88596.0], [93.0, 89183.0], [92.0, 89604.0], [99.0, 86393.0], [98.0, 87009.0], [97.0, 87346.0], [96.0, 87887.0], [103.0, 84887.0], [102.0, 85359.0], [101.0, 85788.0], [100.0, 85872.0], [107.0, 82820.0], [106.0, 83425.0], [105.0, 84232.0], [104.0, 84344.0], [111.0, 80760.0], [110.0, 81282.0], [109.0, 81683.0], [108.0, 82244.0], [115.0, 78635.0], [114.0, 79178.0], [113.0, 79687.0], [112.0, 80174.0], [119.0, 76641.0], [118.0, 77084.0], [117.0, 77665.0], [116.0, 78110.0], [123.0, 74578.0], [122.0, 75194.0], [121.0, 75767.0], [120.0, 76286.0], [127.0, 72597.0], [126.0, 73120.0], [125.0, 73596.0], [124.0, 74067.0], [135.0, 68837.0], [134.0, 69081.0], [133.0, 69551.0], [132.0, 70151.0], [131.0, 70590.0], [130.0, 71107.0], [129.0, 71627.0], [128.0, 72129.0], [143.0, 64695.0], [142.0, 65202.0], [141.0, 65656.0], [140.0, 66218.0], [139.0, 66643.0], [138.0, 67232.0], [137.0, 67661.0], [136.0, 68222.0], [151.0, 60589.0], [150.0, 61093.0], [149.0, 61651.0], [148.0, 62122.0], [147.0, 62654.0], [146.0, 63186.0], [145.0, 63914.0], [144.0, 64441.0], [159.0, 56499.0], [158.0, 56975.0], [157.0, 57509.0], [156.0, 58026.0], [155.0, 58536.0], [154.0, 59087.0], [153.0, 59568.0], [152.0, 60117.0], [167.0, 53196.0], [166.0, 53741.0], [165.0, 54244.0], [164.0, 55039.0], [163.0, 55450.0], [162.0, 55616.0], [161.0, 56074.0], [160.0, 56051.0], [175.0, 49008.0], [174.0, 49498.0], [173.0, 49940.0], [172.0, 50506.0], [171.0, 51027.0], [170.0, 51550.0], [169.0, 52029.0], [168.0, 52660.0], [183.0, 25337.5], [182.0, 25624.5], [181.0, 25408.0], [180.0, 26060.5], [179.0, 46897.0], [178.0, 47426.0], [177.0, 48017.0], [176.0, 48586.0], [191.0, 22503.0], [190.0, 12289.6], [189.0, 12335.6], [188.0, 16838.0], [187.0, 12470.2], [186.0, 14175.5], [185.0, 14846.0], [184.0, 17873.333333333336], [199.0, 12912.25], [198.0, 15062.666666666666], [197.0, 11057.4], [195.0, 15692.666666666666], [192.0, 16466.666666666664], [196.0, 15915.666666666666], [194.0, 22281.0], [193.0, 16949.333333333336], [207.0, 8729.4], [206.0, 7790.2], [205.0, 9093.88888888889], [204.0, 12345.0], [202.0, 11796.75], [201.0, 12401.0], [203.0, 11770.0], [200.0, 14522.333333333334], [212.0, 9370.333333333334], [210.0, 8502.111111111111], [209.0, 10067.333333333332], [208.0, 8179.8], [211.0, 10055.5], [214.0, 10663.6], [213.0, 8857.666666666666], [215.0, 9056.625], [216.0, 6997.461538461539], [218.0, 11803.0], [223.0, 15628.5], [222.0, 15647.5], [221.0, 12907.333333333332], [219.0, 13028.666666666668], [220.0, 27160.0], [217.0, 28725.0], [226.0, 8689.833333333334], [229.0, 8930.4], [228.0, 9301.8], [227.0, 11502.666666666668], [230.0, 7670.5], [231.0, 13470.5], [225.0, 12779.0], [224.0, 24907.0], [235.0, 10383.333333333332], [234.0, 12805.0], [233.0, 13054.5], [232.0, 13242.0], [239.0, 8068.4], [237.0, 10167.666666666666], [238.0, 11990.0], [236.0, 18872.0], [243.0, 8765.333333333334], [242.0, 10946.5], [241.0, 11164.0], [240.0, 9588.0], [247.0, 12841.0], [246.0, 13341.0], [245.0, 13935.0], [244.0, 14372.0], [255.0, 6665.333333333333], [254.0, 6468.0], [253.0, 6392.333333333333], [252.0, 6791.666666666667], [251.0, 7983.5], [250.0, 11391.0], [249.0, 11872.0], [248.0, 12365.0], [259.0, 5776.2], [263.0, 5274.857142857143], [262.0, 5863.4], [261.0, 6262.5], [260.0, 6558.0], [265.0, 5182.8], [266.0, 5282.25], [267.0, 4940.5], [264.0, 5472.333333333333], [268.0, 4706.5], [270.0, 4641.0], [269.0, 4907.666666666667], [271.0, 4722.4], [258.0, 6367.666666666667], [257.0, 7039.0], [256.0, 6322.0], [284.0, 4629.8], [286.0, 4553.333333333333], [287.0, 4631.642857142857], [281.0, 4748.666666666667], [280.0, 4776.666666666667], [285.0, 4812.833333333334], [283.0, 4647.571428571428], [282.0, 4474.0], [279.0, 4671.4], [273.0, 4607.571428571428], [272.0, 4715.857142857143], [275.0, 4760.6], [274.0, 4624.25], [278.0, 4939.8], [277.0, 4781.555555555556], [276.0, 4722.75], [302.0, 4936.0], [301.0, 4860.75], [303.0, 4739.333333333333], [300.0, 4728.666666666667], [299.0, 4866.75], [298.0, 4809.5], [297.0, 4724.333333333333], [296.0, 5022.0], [294.0, 5041.5], [291.0, 4814.0], [290.0, 4712.875], [289.0, 4574.428571428572], [288.0, 5059.166666666666], [295.0, 4085.0], [293.0, 4701.666666666667], [292.0, 4609.833333333334], [307.0, 4761.5], [311.0, 4934.5], [312.0, 4720.5], [313.0, 5016.0], [315.0, 4898.0], [314.0, 4996.0], [310.0, 4385.0], [309.0, 4759.5], [308.0, 4997.0], [306.0, 4768.5], [305.0, 4736.0], [304.0, 4775.5], [319.0, 4846.0], [318.0, 4858.0], [317.0, 4826.0], [316.0, 4858.0], [334.0, 4536.0], [329.0, 4620.0], [335.0, 4820.0], [331.0, 4767.5], [330.0, 4705.0], [333.0, 4487.0], [332.0, 4593.0], [328.0, 5031.0], [327.0, 5050.0], [321.0, 4776.0], [320.0, 4966.0], [323.0, 4676.0], [322.0, 4890.0], [326.0, 4677.0], [325.0, 4599.0], [324.0, 4648.0], [351.0, 5003.428571428572], [347.0, 4711.333333333333], [349.0, 4755.0], [350.0, 4671.0], [336.0, 4906.0], [337.0, 4737.0], [348.0, 4424.0], [339.0, 4911.0], [346.0, 4767.0], [345.0, 4842.5], [344.0, 4604.5], [343.0, 5060.0], [342.0, 4638.0], [341.0, 4770.333333333333], [340.0, 4927.5], [366.0, 5005.5], [367.0, 5209.833333333334], [365.0, 5076.625], [364.0, 4938.750000000001], [363.0, 4973.5], [362.0, 4945.000000000001], [361.0, 5158.714285714286], [360.0, 5225.888888888889], [358.0, 5108.0], [355.0, 5045.75], [354.0, 4902.666666666667], [353.0, 4954.666666666667], [359.0, 5018.8], [352.0, 4799.0], [357.0, 5103.625], [356.0, 4964.0], [368.0, 5175.833333333334], [370.0, 5095.3], [369.0, 5134.166666666667], [371.0, 5257.3125], [381.0, 5129.8], [380.0, 5116.25], [383.0, 5018.2], [382.0, 5140.5], [377.0, 5395.6], [379.0, 5217.0], [378.0, 5114.5], [376.0, 5096.0], [375.0, 5073.4], [374.0, 5330.0], [373.0, 5037.666666666666], [372.0, 5210.2], [391.0, 5279.0], [389.0, 5282.333333333333], [388.0, 4827.0], [387.0, 5305.5], [386.0, 5250.0], [385.0, 5014.0], [384.0, 5387.0], [393.0, 5159.0], [392.0, 5035.0], [390.0, 6123.0], [1.0, 123423.0]], "isOverall": false, "label": "https://nashik.ppbharti.in/Police_Patil/Home/Index", "isController": false}, {"data": [[250.94199999999964, 22058.794999999995]], "isOverall": false, "label": "https://nashik.ppbharti.in/Police_Patil/Home/Index-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 393.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 269.18333333333334, "minX": 1.69666182E12, "maxY": 613702.9166666666, "series": [{"data": [[1.69666182E12, 613702.9166666666], [1.69666194E12, 24274.583333333332], [1.69666188E12, 87565.83333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69666182E12, 7181.116666666667], [1.69666194E12, 269.18333333333334], [1.69666188E12, 1024.6333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69666194E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4199.0, "minX": 1.69666176E12, "maxY": 119014.27272727274, "series": [{"data": [[1.69666182E12, 7525.089805825246], [1.69666194E12, 119014.27272727272], [1.69666176E12, 4199.0], [1.69666188E12, 78811.3474576271]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.69666182E12, 7513.024183796853], [1.69666194E12, 119014.27272727274], [1.69666188E12, 78811.3474576271]], "isOverall": false, "label": "https://nashik.ppbharti.in/Police_Patil/Home/Index", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69666194E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4164.666666666667, "minX": 1.69666176E12, "maxY": 78549.58474576272, "series": [{"data": [[1.69666182E12, 7209.9733009708725], [1.69666194E12, 65203.07272727272], [1.69666176E12, 4164.666666666667], [1.69666188E12, 78549.58474576272]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.69666182E12, 7198.926239419587], [1.69666194E12, 65203.07272727272], [1.69666188E12, 78549.58474576272]], "isOverall": false, "label": "https://nashik.ppbharti.in/Police_Patil/Home/Index", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69666194E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3574.0, "minX": 1.69666176E12, "maxY": 118655.7272727273, "series": [{"data": [[1.69666182E12, 6755.908980582518], [1.69666194E12, 118655.7272727273], [1.69666176E12, 3574.0], [1.69666188E12, 78270.593220339]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.69666182E12, 6744.366384522372], [1.69666194E12, 118655.72727272728], [1.69666188E12, 78270.593220339]], "isOverall": false, "label": "https://nashik.ppbharti.in/Police_Patil/Home/Index", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69666194E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2842.0, "minX": 1.69666182E12, "maxY": 123423.0, "series": [{"data": [[1.69666182E12, 49498.0], [1.69666194E12, 123423.0], [1.69666188E12, 107612.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69666182E12, 9716.2], [1.69666194E12, 122260.6], [1.69666188E12, 102139.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69666182E12, 45801.12000000001], [1.69666194E12, 123423.0], [1.69666188E12, 107518.71]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69666182E12, 29914.599999999962], [1.69666194E12, 123094.2], [1.69666188E12, 105122.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69666182E12, 2842.0], [1.69666194E12, 108151.0], [1.69666188E12, 49940.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69666182E12, 5095.0], [1.69666194E12, 115618.0], [1.69666188E12, 78906.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69666194E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4161.5, "minX": 1.0, "maxY": 123149.0, "series": [{"data": [[32.0, 6312.0], [2.0, 57767.5], [39.0, 5755.0], [40.0, 5067.5], [42.0, 6411.0], [43.0, 5192.0], [44.0, 5055.5], [48.0, 4161.5], [3.0, 85359.0], [50.0, 5049.0], [52.0, 4496.5], [59.0, 4556.0], [63.0, 4842.0], [64.0, 4891.0], [1.0, 70589.0], [72.0, 5304.0], [5.0, 9713.0], [26.0, 123149.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[26.0, 122781.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 72.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 122878.0, "series": [{"data": [[32.0, 6029.5], [2.0, 57513.0], [39.0, 5322.0], [40.0, 4778.0], [42.0, 6149.5], [43.0, 4944.0], [44.0, 4728.0], [48.0, 3890.0], [3.0, 85117.0], [50.0, 4773.5], [52.0, 4103.0], [59.0, 4257.0], [63.0, 4474.0], [64.0, 4647.0], [1.0, 70340.5], [72.0, 4938.0], [5.0, 9462.0], [26.0, 122878.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[26.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 72.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.5833333333333335, "minX": 1.69666176E12, "maxY": 13.083333333333334, "series": [{"data": [[1.69666182E12, 13.083333333333334], [1.69666176E12, 3.5833333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69666182E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.69666182E12, "maxY": 13.783333333333333, "series": [{"data": [[1.69666182E12, 13.783333333333333], [1.69666194E12, 0.5166666666666667], [1.69666188E12, 1.9666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69666194E12, 0.4]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69666194E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.69666176E12, "maxY": 13.783333333333333, "series": [{"data": [[1.69666182E12, 13.733333333333333], [1.69666194E12, 0.5166666666666667], [1.69666176E12, 0.05], [1.69666188E12, 1.9666666666666666]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.69666182E12, 13.783333333333333], [1.69666194E12, 0.5166666666666667], [1.69666188E12, 1.9666666666666666]], "isOverall": false, "label": "https://nashik.ppbharti.in/Police_Patil/Home/Index-success", "isController": false}, {"data": [[1.69666194E12, 0.4]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.69666194E12, 0.4]], "isOverall": false, "label": "https://nashik.ppbharti.in/Police_Patil/Home/Index-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69666194E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.69666176E12, "maxY": 27.516666666666666, "series": [{"data": [[1.69666182E12, 27.516666666666666], [1.69666194E12, 1.0333333333333334], [1.69666176E12, 0.05], [1.69666188E12, 3.933333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69666194E12, 0.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69666194E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

