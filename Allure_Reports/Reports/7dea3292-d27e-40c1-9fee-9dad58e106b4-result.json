{"name": "test_applications", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Failed.[object Object]\nMessage: unexpected alert open: {Alert text : Failed.[object Object]}\n  (Session info: chrome=117.0.5938.150)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F37B7D12+55474]\n\t(No symbol) [0x00007FF6F37277C2]\n\t(No symbol) [0x00007FF6F35DE0EB]\n\t(No symbol) [0x00007FF6F3658132]\n\t(No symbol) [0x00007FF6F363EF33]\n\t(No symbol) [0x00007FF6F3613D41]\n\t(No symbol) [0x00007FF6F3614F84]\n\tGetHandleVerifier [0x00007FF6F3B1B762+3609346]\n\tGetHandleVerifier [0x00007FF6F3B71A80+3962400]\n\tGetHandleVerifier [0x00007FF6F3B69F0F+3930799]\n\tGetHandleVerifier [0x00007FF6F3853CA6+694342]\n\t(No symbol) [0x00007FF6F3732218]\n\t(No symbol) [0x00007FF6F372E484]\n\t(No symbol) [0x00007FF6F372E5B2]\n\t(No symbol) [0x00007FF6F371EE13]\n\tBaseThreadInitThunk [0x00007FFBBA237034+20]\n\tRtlUserThreadStart [0x00007FFBBA382651+33]", "trace": "self = <TEST_CASE.test_application_page.Test_Application object at 0x000002979888CBD0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a5be28a1b38af88cebf6d580290ef4d3\")>\n\n    def test_applications(self, setup):\n        self.driver = setup\n        self.af = application_page(self.driver)\n        self.af.enter_apply_police_patil()\n        self.log.info(\"inter in home page\")\n        time.sleep(4)\n>       self.af.enter_upvibhag_dd()\n\nTEST_CASE\\test_application_page.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPAGE_OBJECT\\Application_Form.py:74: in enter_upvibhag_dd\n    vibhag = Select(self.driver.find_element(*application_page.click_upvibhag_name))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000297995A2050>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Failed.[object Object]\"},\"error\":\"unexpected alert open\",\"message\"...07FF6F371EE13]\\\\n\\\\tBaseThreadInitThunk [0x00007FFBBA237034+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFBBA382651+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Failed.[object Object]\nE           Message: unexpected alert open: {Alert text : Failed.[object Object]}\nE             (Session info: chrome=117.0.5938.150)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00007FF6F37B7D12+55474]\nE           \t(No symbol) [0x00007FF6F37277C2]\nE           \t(No symbol) [0x00007FF6F35DE0EB]\nE           \t(No symbol) [0x00007FF6F3658132]\nE           \t(No symbol) [0x00007FF6F363EF33]\nE           \t(No symbol) [0x00007FF6F3613D41]\nE           \t(No symbol) [0x00007FF6F3614F84]\nE           \tGetHandleVerifier [0x00007FF6F3B1B762+3609346]\nE           \tGetHandleVerifier [0x00007FF6F3B71A80+3962400]\nE           \tGetHandleVerifier [0x00007FF6F3B69F0F+3930799]\nE           \tGetHandleVerifier [0x00007FF6F3853CA6+694342]\nE           \t(No symbol) [0x00007FF6F3732218]\nE           \t(No symbol) [0x00007FF6F372E484]\nE           \t(No symbol) [0x00007FF6F372E5B2]\nE           \t(No symbol) [0x00007FF6F371EE13]\nE           \tBaseThreadInitThunk [0x00007FFBBA237034+20]\nE           \tRtlUserThreadStart [0x00007FFBBA382651+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:228: UnexpectedAlertPresentException"}, "attachments": [{"name": "log", "source": "2d1aa687-b76d-4b49-95fa-c9b5a49c2673-attachment.txt", "type": "text/plain"}], "start": 1696670519251, "stop": 1696670556640, "uuid": "37f2b97f-7c9e-40ef-8962-c730389cf660", "historyId": "834641593152bcf932d23a9deb55fbab", "testCaseId": "834641593152bcf932d23a9deb55fbab", "fullName": "TEST_CASE.test_application_page.Test_Application#test_applications", "labels": [{"name": "parentSuite", "value": "TEST_CASE"}, {"name": "suite", "value": "test_application_page"}, {"name": "subSuite", "value": "Test_Application"}, {"name": "host", "value": "DESKTOP-1BVA85T"}, {"name": "thread", "value": "12016-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TEST_CASE.test_application_page"}]}